class Solution {
public:
    
   void dfs(int row , int col , vector<vector<int>> &vis , vector<vector<int>>& board, int delrow[] , int delcol[] , int &count){
        vis[row][col]=1;
        int n=board.size();
        int m=board[0].size();
        count++;
        for(int i=0 ; i<4 ; i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && board[nrow][ncol]==1){
                dfs(nrow,ncol,vis,board,delrow,delcol ,count);
            }
        }
    }
    
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        
        vector<vector<int>> vis(n,vector<int>(m,0));
        int maxi=0;
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(!vis[i][j] && grid[i][j]==1){
                    int count=0;
                    dfs(i,j,vis,grid,delrow,delcol,count);
                    maxi=max(maxi,count);
                }
            }
        }
        return maxi;
    }
};
